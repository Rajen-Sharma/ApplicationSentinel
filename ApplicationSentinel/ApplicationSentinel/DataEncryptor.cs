using System.Security.Cryptography;
using System.Text;

namespace ApplicationSentinel
{



    public class DataEncryptor
    {

        private string salt = "$e7?8f@l4";

        public static string GenerateAESKey(string hostNameOrIP,string userName)
        {
            // Get the number of words and letters per word.
            int num_letters = 16;
            // Make an array of the letters we will use.
            char[] letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789".ToCharArray();

            // Make a random number generator.
            Random rand = new Random();

            // Make the words.
            // Make a word.
            string word = "";
            for (int j = 1; j <= num_letters; j++)
            {
                // Pick a random number between 0 and 25
                // to select a letter from the letters array.
                int letter_num = rand.Next(0, letters.Length - 1);

                // Append the letter.
                word += letters[letter_num];
            }

            new SqlHelper().ExecuteNonQuery("Insert INTO [dbo].[EncryptionKeys]([EncryptionKey],[UserId],[MachineNameOrIP]) VALUES ('"+ word + "','"+ userName + "','"+ hostNameOrIP + "')");


            return word;
        }

        public static string EncryptString(string key, string plainText)
        {
            byte[] iv = new byte[16];
            byte[] array;

            using (Aes aes = Aes.Create())
            {
                aes.Key = Encoding.UTF8.GetBytes(key);
                aes.IV = iv;

                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);

                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter streamWriter = new StreamWriter((Stream)cryptoStream))
                        {
                            streamWriter.Write(plainText);
                        }

                        array = memoryStream.ToArray();
                    }
                }
            }

            return Convert.ToBase64String(array);
        }

        public static string DecryptString(string key, string cipherText, string hostNameOrIP, string userName)
        {
            string query = "SELECT [UserId] FROM [EnvDashboard].[dbo].[EncryptionKeys] where [EncryptionKey] = '"+ key + "'";
            var res = new SqlHelper().ExecuteScalar(query);
            var keyUser = (res.ToString().Trim());

            if (keyUser == userName)
            {
                query = "SELECT [MachineNameOrIP] FROM [EnvDashboard].[dbo].[EncryptionKeys] where [EncryptionKey] = '" + key + "'";
                res = new SqlHelper().ExecuteScalar(query);
                var keyMachineNameOrIp = (res.ToString().Trim());
                if (keyMachineNameOrIp == hostNameOrIP)
                {
                    byte[] iv = new byte[16];
                    byte[] buffer = Convert.FromBase64String(cipherText);

                    using (Aes aes = Aes.Create())
                    {
                        aes.Key = Encoding.UTF8.GetBytes(key);
                        aes.IV = iv;
                        ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);

                        using (MemoryStream memoryStream = new MemoryStream(buffer))
                        {
                            using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, decryptor, CryptoStreamMode.Read))
                            {
                                using (StreamReader streamReader = new StreamReader((Stream)cryptoStream))
                                {
                                    return streamReader.ReadToEnd();
                                }
                            }
                        }
                    }
                }else
                {
                    throw new Exception("Key is generated for diferrent machine. You are trying MachineOrIp:" + hostNameOrIP);
                }
            }else
            {
                throw new Exception("Key is generated by diferrent user. You are trying user:" + userName);
            }
        }

    }
}
